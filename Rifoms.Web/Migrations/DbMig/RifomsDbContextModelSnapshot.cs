// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rifoms.Domain.Context;

namespace Rifoms.Web.Migrations.DbMig
{
    [DbContext(typeof(RifomsDbContext))]
    partial class RifomsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_unicode_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("app_roles");

                    b
                        .HasComment("таблица для app_roles");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("app_roleclaims");

                    b
                        .HasComment("таблица для app_roleclaims");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Password")
                        .HasComment("колонка для хранения пароля");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("app_users");

                    b
                        .HasComment("таблица для app_users");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("app_userclaims");

                    b
                        .HasComment("таблица для app_userclaims");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("app_userlogins");

                    b
                        .HasComment("таблица для app_userlogins");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("app_userroles");

                    b
                        .HasComment("таблица для app_userroles");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("app_usertokens");

                    b
                        .HasComment("таблица для app_usertokens");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("component");

                    b.Property<bool>("IsTracked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_tracked");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_visible");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "IsVisible" }, "name");

                    b.ToTable("cms_actions");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsActionsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ActionId")
                        .HasColumnType("int")
                        .HasColumnName("action_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsFriendsOnly")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_friends_only");

                    b.Property<bool>("IsUsersOnly")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_users_only");

                    b.Property<string>("Object")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("object");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("object_url");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("target");

                    b.Property<int>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_url");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ActionId", "UserId" }, "action_id");

                    b.HasIndex(new[] { "ObjectId" }, "object_id");

                    b.HasIndex(new[] { "TargetId" }, "target_id");

                    b.ToTable("cms_actions_log");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBanlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Autodelete")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("autodelete");

                    b.Property<DateTime>("Bandate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("bandate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cause");

                    b.Property<int>("IntNum")
                        .HasColumnType("int")
                        .HasColumnName("int_num");

                    b.Property<string>("IntPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("int_period");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Ip" }, "ip");

                    b.HasIndex(new[] { "UserId" }, "user_id");

                    b.ToTable("cms_banlist");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Clicks")
                        .HasColumnType("int")
                        .HasColumnName("clicks");

                    b.Property<string>("Fileurl")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fileurl");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<string>("Link")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("link");

                    b.Property<int>("Maxhits")
                        .HasColumnType("int")
                        .HasColumnName("maxhits");

                    b.Property<int>("Maxuser")
                        .HasColumnType("int")
                        .HasColumnName("maxuser");

                    b.Property<string>("Position")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("position")
                        .HasDefaultValueSql("'banner_top'");

                    b.Property<DateTime?>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<string>("Typeimg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("typeimg")
                        .HasDefaultValueSql("'image'");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.ToTable("cms_banners");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBannerHit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BannerId")
                        .HasColumnType("int")
                        .HasColumnName("banner_id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BannerId" }, "banner_id");

                    b.HasIndex(new[] { "Ip", "BannerId" }, "ip")
                        .IsUnique()
                        .HasDatabaseName("ip1");

                    b.ToTable("cms_banner_hits");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("allow_who");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int")
                        .HasColumnName("comments_count");

                    b.Property<bool>("Forall")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("forall");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("owner")
                        .HasDefaultValueSql("'user'");

                    b.Property<string>("Ownertype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ownertype")
                        .HasDefaultValueSql("'single'");

                    b.Property<bool>("Premod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("premod");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Seolink")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("seolink");

                    b.Property<bool?>("Showcats")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showcats")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("view_type")
                        .HasDefaultValueSql("'list'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Pubdate" }, "pubdate");

                    b.HasIndex(new[] { "Seolink" }, "seolink");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id1");

                    b.ToTable("cms_blogs");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBlogAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Startdate")
                        .HasColumnType("datetime")
                        .HasColumnName("startdate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlogId" }, "blog_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id2");

                    b.ToTable("cms_blog_authors");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBlogCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlogId" }, "blog_id")
                        .HasDatabaseName("blog_id1");

                    b.ToTable("cms_blog_cats");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("allow_who");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<bool?>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int")
                        .HasColumnName("comments_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentHtml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_html");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("edit_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EditTimes")
                        .HasColumnType("int")
                        .HasColumnName("edit_times");

                    b.Property<string>("Feel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("feel");

                    b.Property<string>("Music")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("music");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Seolink")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("seolink");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BlogId" }, "blog_id")
                        .HasDatabaseName("blog_id2");

                    b.HasIndex(new[] { "ContentHtml" }, "content_html")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "Seolink" }, "seolink")
                        .HasDatabaseName("seolink1");

                    b.HasIndex(new[] { "Title" }, "title")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id3");

                    b.ToTable("cms_blog_posts");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBoardCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("form_id");

                    b.Property<string>("Icon")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("icon")
                        .HasDefaultValueSql("'folder_grey.png'");

                    b.Property<bool?>("IsPhotos")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_photos")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Maxcols")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("maxcols")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Nsdiffer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<string>("Obtypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("obtypes");

                    b.Property<string>("Orderby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("orderby")
                        .HasDefaultValueSql("'title'");

                    b.Property<bool?>("Orderform")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("orderform")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordering")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Orderto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("orderto")
                        .HasDefaultValueSql("'asc'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("Perpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("perpage")
                        .HasDefaultValueSql("'15'");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<bool>("Public")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("public");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<bool?>("Showdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdate")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Thumb1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thumb1")
                        .HasDefaultValueSql("'64'");

                    b.Property<int>("Thumb2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thumb2")
                        .HasDefaultValueSql("'400'");

                    b.Property<int>("Thumbsqr")
                        .HasColumnType("int")
                        .HasColumnName("thumbsqr");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("Uplimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uplimit")
                        .HasDefaultValueSql("'10'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft");

                    b.HasIndex(new[] { "ParentId" }, "parent_id");

                    b.ToTable("cms_board_cats");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsBoardItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("file");

                    b.Property<string>("Formsdata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("formsdata");

                    b.Property<uint>("Hits")
                        .HasColumnType("int unsigned")
                        .HasColumnName("hits");

                    b.Property<uint>("Ip")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ip");

                    b.Property<bool>("IsVip")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_vip");

                    b.Property<string>("MoreImages")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("more_images");

                    b.Property<string>("Obtype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("obtype");

                    b.Property<DateTime?>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Pubdays")
                        .HasColumnType("int")
                        .HasColumnName("pubdays");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("Vipdate")
                        .HasColumnType("datetime")
                        .HasColumnName("vipdate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "category_id");

                    b.HasIndex(new[] { "City" }, "city");

                    b.HasIndex(new[] { "Content" }, "content")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "Ip" }, "ip")
                        .HasDatabaseName("ip2");

                    b.HasIndex(new[] { "Obtype" }, "obtype");

                    b.HasIndex(new[] { "Title" }, "title")
                        .HasDatabaseName("title1")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id4");

                    b.ToTable("cms_board_items");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsCache", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Cachedate")
                        .HasColumnType("datetime")
                        .HasColumnName("cachedate");

                    b.Property<string>("Cachefile")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("cachefile");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("target");

                    b.Property<string>("TargetId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.ToTable("cms_cache");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<int>("Maxcols")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("maxcols")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ModgrpId")
                        .HasColumnType("int")
                        .HasColumnName("modgrp_id");

                    b.Property<string>("Nsdiffer")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<string>("Orderby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("orderby")
                        .HasDefaultValueSql("'date'");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<string>("Orderto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("orderto")
                        .HasDefaultValueSql("'asc'");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("Photoalbum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photoalbum");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Seolink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("seolink");

                    b.Property<bool?>("Showcomm")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showcomm")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdate")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("Showdesc")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdesc");

                    b.Property<bool?>("Showrss")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showrss")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showtags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showtags")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Tpl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tpl")
                        .HasDefaultValueSql("'com_content_view.tpl'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft")
                        .HasDatabaseName("NSLeft1");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("parent_id1");

                    b.HasIndex(new[] { "Seolink" }, "seolink")
                        .HasDatabaseName("seolink2");

                    b.ToTable("cms_category");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("admin_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("AlbumMinKarma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("album_min_karma")
                        .HasDefaultValueSql("'25'");

                    b.Property<int>("BlogMinKarma")
                        .HasColumnType("int")
                        .HasColumnName("blog_min_karma");

                    b.Property<bool>("BlogPremod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("blog_premod");

                    b.Property<string>("Clubtype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("clubtype")
                        .HasDefaultValueSql("'public'");

                    b.Property<int>("CreateKarma")
                        .HasColumnType("int")
                        .HasColumnName("create_karma");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool?>("EnabledBlogs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled_blogs")
                        .HasDefaultValueSql("'-1'");

                    b.Property<bool?>("EnabledPhotos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("enabled_photos")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("imageurl");

                    b.Property<bool>("IsVip")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_vip");

                    b.Property<float>("JoinCost")
                        .HasColumnType("float")
                        .HasColumnName("join_cost");

                    b.Property<int>("JoinKarmaLimit")
                        .HasColumnType("int")
                        .HasColumnName("join_karma_limit");

                    b.Property<int>("JoinMinKarma")
                        .HasColumnType("int")
                        .HasColumnName("join_min_karma");

                    b.Property<int>("Maxsize")
                        .HasColumnType("int")
                        .HasColumnName("maxsize");

                    b.Property<int>("MembersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("members_count")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PhotoMinKarma")
                        .HasColumnType("int")
                        .HasColumnName("photo_min_karma");

                    b.Property<bool>("PhotoPremod")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("photo_premod");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AdminId" }, "admin_id");

                    b.HasIndex(new[] { "Pubdate" }, "pubdate")
                        .HasDatabaseName("pubdate1");

                    b.ToTable("cms_clubs");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentBbcode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_bbcode");

                    b.Property<string>("Guestname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("guestname");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_hidden");

                    b.Property<bool?>("IsNew")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_new")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("Pid")
                        .HasColumnType("int")
                        .HasColumnName("pid");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("target");

                    b.Property<int>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetLink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("target_link");

                    b.Property<string>("TargetTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("target_title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TargetId" }, "target_id")
                        .HasDatabaseName("target_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id5");

                    b.ToTable("cms_comments");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsCommentTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("component");

                    b.Property<string>("Subj")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("subj");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target_table");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Target" }, "target")
                        .IsUnique();

                    b.ToTable("cms_comment_targets");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("author")
                        .HasDefaultValueSql("'InstantCMS team'");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("config");

                    b.Property<int>("Internal")
                        .HasColumnType("int")
                        .HasColumnName("internal");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("System")
                        .HasColumnType("int")
                        .HasColumnName("system");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("version")
                        .HasDefaultValueSql("'1.10.3'");

                    b.HasKey("Id");

                    b.ToTable("cms_components");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Canrate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("canrate")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<bool?>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Content")
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("Enddate")
                        .HasColumnType("date")
                        .HasColumnName("enddate");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<bool>("IsArhive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_arhive");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_end");

                    b.Property<string>("MetaDesc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta_desc");

                    b.Property<string>("MetaKeys")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meta_keys");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<string>("Pagetitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("pagetitle");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("'1000-01-01 00:00:00'");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("Seolink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("seolink");

                    b.Property<bool?>("Showdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdate")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showlatest")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showlatest")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showpath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showpath")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showtitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showtitle")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("title");

                    b.Property<string>("Tpl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tpl")
                        .HasDefaultValueSql("'com_content_read.tpl'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("url");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("category_id1");

                    b.HasIndex(new[] { "Content" }, "content")
                        .HasDatabaseName("content1")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "Seolink" }, "seolink")
                        .HasDatabaseName("seolink3");

                    b.HasIndex(new[] { "Title" }, "title")
                        .HasDatabaseName("title2")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id6");

                    b.ToTable("cms_content");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsContentAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("content_id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("content_type");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentId" }, "content_id");

                    b.ToTable("cms_content_access");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsCronJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ClassMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("class_method");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("class_name");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("component");

                    b.Property<string>("CustomFile")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("custom_file");

                    b.Property<bool?>("IsEnabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enabled")
                        .HasDefaultValueSql("'1'");

                    b.Property<short>("IsNew")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("is_new")
                        .HasDefaultValueSql("'1'");

                    b.Property<short>("JobInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("job_interval")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_name");

                    b.Property<DateTime>("JobRunDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("job_run_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ModelMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model_method");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "JobName", "IsEnabled" }, "job_name");

                    b.ToTable("cms_cron_jobs");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsDownload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Fileurl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fileurl");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.HasKey("Id");

                    b.ToTable("cms_downloads");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsEventHook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("event");

                    b.Property<string>("PluginId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("plugin_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Event", "PluginId" }, "event");

                    b.ToTable("cms_event_hooks");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsFaqCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("cms_faq_cats");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsFaqQuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<DateTime>("Answerdate")
                        .HasColumnType("datetime")
                        .HasColumnName("answerdate");

                    b.Property<int>("AnsweruserId")
                        .HasColumnType("int")
                        .HasColumnName("answeruser_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Quest")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quest");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("category_id2");

                    b.HasIndex(new[] { "Quest", "Answer" }, "quest")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("cms_faq_quests");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("link");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("cms_filters");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("FormAction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("form_action")
                        .HasDefaultValueSql("'/forms/process'");

                    b.Property<bool>("OnlyFields")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("only_fields");

                    b.Property<string>("Sendto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("sendto")
                        .HasDefaultValueSql("'mail'");

                    b.Property<bool?>("Showtitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showtitle")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("Tpl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("tpl")
                        .HasDefaultValueSql("'form'");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Title" }, "title")
                        .HasDatabaseName("title3");

                    b.ToTable("cms_forms");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsFormField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("config");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<int>("FormId")
                        .HasColumnType("int")
                        .HasColumnName("form_id");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("kind");

                    b.Property<int>("Mustbe")
                        .HasColumnType("int")
                        .HasColumnName("mustbe");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FormId" }, "form_id");

                    b.ToTable("cms_form_fields");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("access_list");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("icon");

                    b.Property<string>("LastMsg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_msg");

                    b.Property<string>("ModerList")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("moder_list");

                    b.Property<string>("Nsdiffer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostCount")
                        .HasColumnType("int")
                        .HasColumnName("post_count");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ThreadCount")
                        .HasColumnType("int")
                        .HasColumnName("thread_count");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<float>("TopicCost")
                        .HasColumnType("float")
                        .HasColumnName("topic_cost");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft")
                        .HasDatabaseName("NSLeft2");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("category_id3");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("parent_id2");

                    b.ToTable("cms_forums");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Seolink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("seolink");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Seolink" }, "seolink")
                        .HasDatabaseName("seolink4");

                    b.ToTable("cms_forum_cats");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("filename");

                    b.Property<int>("Filesize")
                        .HasColumnType("int")
                        .HasColumnName("filesize");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PostId" }, "post_id");

                    b.ToTable("cms_forum_files");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answers");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("Enddate")
                        .HasColumnType("datetime")
                        .HasColumnName("enddate");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("options");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("thread_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ThreadId" }, "thread_id");

                    b.ToTable("cms_forum_polls");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AttachCount")
                        .HasColumnType("int")
                        .HasColumnName("attach_count");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentHtml")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_html");

                    b.Property<DateTime>("Editdate")
                        .HasColumnType("datetime")
                        .HasColumnName("editdate");

                    b.Property<int>("Edittimes")
                        .HasColumnType("int")
                        .HasColumnName("edittimes");

                    b.Property<bool>("Pinned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pinned");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int")
                        .HasColumnName("thread_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentHtml" }, "content_html")
                        .HasDatabaseName("content_html1")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "ThreadId", "Pubdate" }, "thread_id")
                        .HasDatabaseName("thread_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id7");

                    b.ToTable("cms_forum_posts");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumThread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("closed");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<int>("ForumId")
                        .HasColumnType("int")
                        .HasColumnName("forum_id");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_hidden");

                    b.Property<string>("LastMsg")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_msg");

                    b.Property<bool>("Pinned")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("pinned");

                    b.Property<int>("PostCount")
                        .HasColumnType("int")
                        .HasColumnName("post_count");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("RelId")
                        .HasColumnType("int")
                        .HasColumnName("rel_id");

                    b.Property<string>("RelTo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("rel_to");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ForumId" }, "forum_id");

                    b.HasIndex(new[] { "RelId" }, "rel_id");

                    b.HasIndex(new[] { "Title" }, "title")
                        .HasDatabaseName("title4")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id8");

                    b.ToTable("cms_forum_threads");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsForumVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("answer");

                    b.Property<int>("PollId")
                        .HasColumnType("int")
                        .HasColumnName("poll_id");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PollId" }, "poll_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id9");

                    b.ToTable("cms_forum_votes");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsGeoCity", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("CountryId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<uint>("RegionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("region_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "country_id");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("name1");

                    b.HasIndex(new[] { "RegionId" }, "region_id");

                    b.ToTable("cms_geo_cities");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsGeoCountry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Alpha2")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("alpha2")
                        .HasDefaultValueSql("''")
                        .IsFixedLength(true);

                    b.Property<string>("Alpha3")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("alpha3")
                        .HasDefaultValueSql("''")
                        .IsFixedLength(true);

                    b.Property<int>("Iso")
                        .HasColumnType("int")
                        .HasColumnName("iso");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordering")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Alpha2" }, "alpha2");

                    b.HasIndex(new[] { "Alpha3" }, "alpha3");

                    b.HasIndex(new[] { "Iso" }, "iso");

                    b.HasIndex(new[] { "Name" }, "name")
                        .HasDatabaseName("name2");

                    b.HasIndex(new[] { "Ordering" }, "ordering");

                    b.ToTable("cms_geo_countries");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsGeoRegion", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("CountryId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name")
                        .HasDefaultValueSql("''");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "country_id")
                        .HasDatabaseName("country_id1");

                    b.ToTable("cms_geo_regions");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("access_list");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("component");

                    b.Property<string>("Iconurl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("iconurl");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<string>("Linkid")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("linkid")
                        .HasDefaultValueSql("'-1'");

                    b.Property<string>("Linktype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("linktype")
                        .HasDefaultValueSql("'link'");

                    b.Property<string>("Menu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("menu");

                    b.Property<string>("Nsdiffer")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordering")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Target")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("target")
                        .HasDefaultValueSql("'_self'");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("template");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft")
                        .HasDatabaseName("NSLeft3");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("parent_id3");

                    b.ToTable("cms_menu");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AccessList")
                        .IsRequired()
                        .HasColumnType("tinytext")
                        .HasColumnName("access_list");

                    b.Property<string>("Author")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("author")
                        .HasDefaultValueSql("'InstantCMS team'");

                    b.Property<int>("Cache")
                        .HasColumnType("int")
                        .HasColumnName("cache");

                    b.Property<string>("Cacheint")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("cacheint")
                        .HasDefaultValueSql("'HOUR'");

                    b.Property<int>("Cachetime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cachetime")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("config");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CssPrefix")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("css_prefix");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_external");

                    b.Property<bool>("IsStrictBind")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_strict_bind");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordering")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Original")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("original")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("position");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Showtitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("showtitle")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Template")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("template")
                        .HasDefaultValueSql("'module.tpl'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("User")
                        .HasColumnType("int")
                        .HasColumnName("user");

                    b.Property<string>("Version")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("version")
                        .HasDefaultValueSql("'1.0'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Content" }, "content")
                        .HasDatabaseName("content2")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "Position" }, "position");

                    b.ToTable("cms_modules");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsModulesBind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasColumnName("menu_id");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("position");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuId" }, "menu_id");

                    b.HasIndex(new[] { "ModuleId" }, "module_id");

                    b.HasIndex(new[] { "Position" }, "position")
                        .HasDatabaseName("position1");

                    b.ToTable("cms_modules_bind");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsNsTransaction", b =>
                {
                    b.Property<uint>("Idtransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("IDTransaction");

                    b.Property<string>("Differ")
                        .HasColumnType("tinytext");

                    b.Property<ulong?>("InTransaction")
                        .HasColumnType("bit(1)");

                    b.Property<string>("TableName")
                        .HasColumnType("tinytext");

                    b.Property<DateTime?>("Tstamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("TStamp");

                    b.HasKey("Idtransaction")
                        .HasName("PRIMARY");

                    b.ToTable("cms_ns_transactions");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsOnline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Agent")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("agent");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip");

                    b.Property<DateTime>("Lastdate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("lastdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SessId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sess_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Viewurl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("viewurl");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SessId" }, "sess_id")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id10");

                    b.ToTable("cms_online");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsPhotoAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool?>("Bbcode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("bbcode")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Cssprefix")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("cssprefix");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("description");

                    b.Property<string>("Iconurl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("iconurl");

                    b.Property<bool>("IsComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_comments");

                    b.Property<int>("Maxcols")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("maxcols")
                        .HasDefaultValueSql("'4'");

                    b.Property<bool?>("Nav")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("nav")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Nsdiffer")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<string>("Orderby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("orderby")
                        .HasDefaultValueSql("'title'");

                    b.Property<bool?>("Orderform")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("orderform")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("Ordering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ordering")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Orderto")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("orderto")
                        .HasDefaultValueSql("'asc'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("Perpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("perpage")
                        .HasDefaultValueSql("'15'");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Public")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("public");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<bool?>("Showdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdate")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showtags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showtags")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Showtype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("showtype")
                        .HasDefaultValueSql("'lightbox'");

                    b.Property<int>("Thumb1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thumb1")
                        .HasDefaultValueSql("'96'");

                    b.Property<int>("Thumb2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thumb2")
                        .HasDefaultValueSql("'480'");

                    b.Property<bool?>("Thumbsqr")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("thumbsqr")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("Uplimit")
                        .HasColumnType("int")
                        .HasColumnName("uplimit");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft")
                        .HasDatabaseName("NSLeft4");

                    b.HasIndex(new[] { "ParentId" }, "parent_id")
                        .HasDatabaseName("parent_id4");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id11");

                    b.ToTable("cms_photo_albums");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsPhotoFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("album_id");

                    b.Property<bool?>("Comments")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("comments")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("file");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<string>("Owner")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("owner")
                        .HasDefaultValueSql("'photos'");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<bool?>("Showdate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showdate")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId" }, "album_id");

                    b.HasIndex(new[] { "Owner" }, "owner");

                    b.HasIndex(new[] { "Title", "Description" }, "title")
                        .HasDatabaseName("title5")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id12");

                    b.ToTable("cms_photo_files");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsPlugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("author");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("config");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Plugin")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("plugin");

                    b.Property<string>("PluginType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("plugin_type");

                    b.Property<bool>("Published")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("cms_plugins");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answers");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("cms_polls");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsPollsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("answer");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ip");

                    b.Property<int>("PollId")
                        .HasColumnType("int")
                        .HasColumnName("poll_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Ip" }, "ip")
                        .HasDatabaseName("ip3");

                    b.HasIndex(new[] { "PollId" }, "poll_id")
                        .HasDatabaseName("poll_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id13");

                    b.ToTable("cms_polls_log");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ip");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("target");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "item_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id14");

                    b.ToTable("cms_ratings");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsRatingTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("component");

                    b.Property<sbyte>("IsUserAffect")
                        .HasColumnType("tinyint")
                        .HasColumnName("is_user_affect");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target");

                    b.Property<string>("TargetTable")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target_table");

                    b.Property<string>("TargetTitle")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("target_title");

                    b.Property<short>("UserWeight")
                        .HasColumnType("smallint")
                        .HasColumnName("user_weight");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Target" }, "target")
                        .IsUnique()
                        .HasDatabaseName("target1");

                    b.ToTable("cms_rating_targets");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsRatingsTotal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("mediumint")
                        .HasColumnName("item_id");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target");

                    b.Property<int>("TotalRating")
                        .HasColumnType("int")
                        .HasColumnName("total_rating");

                    b.Property<int>("TotalVotes")
                        .HasColumnType("int")
                        .HasColumnName("total_votes");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "item_id")
                        .HasDatabaseName("item_id1");

                    b.HasIndex(new[] { "Target", "ItemId" }, "target")
                        .HasDatabaseName("target2");

                    b.ToTable("cms_ratings_total");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("link");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("place");

                    b.Property<string>("Placelink")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("placelink");

                    b.Property<DateTime?>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Date" }, "date");

                    b.HasIndex(new[] { "SessionId" }, "session_id");

                    b.ToTable("cms_search");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsSubscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("target");

                    b.Property<int>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TargetId" }, "target_id")
                        .HasDatabaseName("target_id2");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id15");

                    b.ToTable("cms_subscribe");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("tag");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("target");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ItemId" }, "item_id")
                        .HasDatabaseName("item_id2");

                    b.HasIndex(new[] { "Tag" }, "tag");

                    b.HasIndex(new[] { "Target", "Tag" }, "target")
                        .HasDatabaseName("target3");

                    b.ToTable("cms_tags");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsTagTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("component");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("target");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Target" }, "target")
                        .IsUnique()
                        .HasDatabaseName("target4");

                    b.ToTable("cms_tag_targets");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Itemscount")
                        .HasColumnType("int")
                        .HasColumnName("itemscount");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("session_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("cms_uc_cart");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcCat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CanEdit")
                        .HasColumnType("int")
                        .HasColumnName("can_edit");

                    b.Property<string>("Cost")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FieldsShow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fields_show")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("Fieldsstruct")
                        .HasColumnType("text")
                        .HasColumnName("fieldsstruct");

                    b.Property<int>("Filters")
                        .HasColumnType("int")
                        .HasColumnName("filters");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_public");

                    b.Property<bool>("IsRatings")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_ratings");

                    b.Property<bool>("IsShop")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_shop");

                    b.Property<string>("Newint")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("newint");

                    b.Property<int>("Nsdiffer")
                        .HasColumnType("int")
                        .HasColumnName("NSDiffer");

                    b.Property<int>("Nsignore")
                        .HasColumnType("int")
                        .HasColumnName("NSIgnore");

                    b.Property<int>("Nsleft")
                        .HasColumnType("int")
                        .HasColumnName("NSLeft");

                    b.Property<int>("Nslevel")
                        .HasColumnType("int")
                        .HasColumnName("NSLevel");

                    b.Property<int>("Nsright")
                        .HasColumnType("int")
                        .HasColumnName("NSRight");

                    b.Property<string>("Orderby")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("orderby")
                        .HasDefaultValueSql("'pubdate'");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<string>("Orderto")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("orderto")
                        .HasDefaultValueSql("'desc'");

                    b.Property<int>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("Perpage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("perpage")
                        .HasDefaultValueSql("'20'");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showabc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showabc")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showmore")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showmore")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("Shownew")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shownew");

                    b.Property<bool?>("Showsort")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showsort")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool?>("Showtags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showtags")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<string>("ViewType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("view_type")
                        .HasDefaultValueSql("'list'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nsleft", "Nsright" }, "NSLeft")
                        .HasDatabaseName("NSLeft5");

                    b.ToTable("cms_uc_cats");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcCatsAccess", b =>
                {
                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.HasIndex(new[] { "CatId", "GroupId" }, "cat_id");

                    b.ToTable("cms_uc_cats_access");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<int>("IfLimit")
                        .HasColumnType("int")
                        .HasColumnName("if_limit");

                    b.Property<sbyte>("Sign")
                        .HasColumnType("tinyint")
                        .HasColumnName("sign");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("title");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("unit");

                    b.Property<float>("Value")
                        .HasColumnType("float")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CatId" }, "cat_id");

                    b.ToTable("cms_uc_discount");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("Canmany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("canmany")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Fieldsdata")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fieldsdata");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("imageurl");

                    b.Property<bool>("IsComments")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_comments");

                    b.Property<string>("MetaDesc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("meta_desc");

                    b.Property<string>("MetaKeys")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("meta_keys");

                    b.Property<int>("OnModerate")
                        .HasColumnType("int")
                        .HasColumnName("on_moderate");

                    b.Property<float>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("'1000-01-01 00:00:00'");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<float>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoryId" }, "category_id")
                        .HasDatabaseName("category_id4");

                    b.HasIndex(new[] { "Title", "Fieldsdata" }, "title")
                        .HasDatabaseName("title6")
                        .HasAnnotation("MySql:FullTextIndex", true);

                    b.ToTable("cms_uc_items");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("ip");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("Id");

                    b.ToTable("cms_uc_ratings");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUcTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("tag");

                    b.HasKey("Id");

                    b.ToTable("cms_uc_tags");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUploadImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("component");

                    b.Property<string>("Fileurl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("fileurl");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("session_id");

                    b.Property<string>("Target")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("target")
                        .HasDefaultValueSql("'forum'");

                    b.Property<int>("TargetId")
                        .HasColumnType("int")
                        .HasColumnName("target_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SessionId" }, "session_id")
                        .HasDatabaseName("session_id1");

                    b.HasIndex(new[] { "TargetId" }, "target_id")
                        .HasDatabaseName("target_id3");

                    b.ToTable("cms_upload_images");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("birthdate")
                        .HasDefaultValueSql("'1000-01-01'");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Fathername")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("group_id")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Icq")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("icq");

                    b.Property<DateTime?>("Invdate")
                        .HasColumnType("datetime")
                        .HasColumnName("invdate");

                    b.Property<int?>("InvitedBy")
                        .HasColumnType("int")
                        .HasColumnName("invited_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_locked");

                    b.Property<bool>("IsLoggedOnce")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_logged_once");

                    b.Property<string>("LastIp")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("last_ip");

                    b.Property<DateTime>("Logdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("logdate")
                        .HasDefaultValueSql("'1000-01-01 00:00:00'");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("login");

                    b.Property<string>("Mobile")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nickname");

                    b.Property<string>("Openid")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("openid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("Regdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("regdate")
                        .HasDefaultValueSql("'1000-01-01 00:00:00'");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("status");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime")
                        .HasColumnName("status_date");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex(new[] { "Birthdate" }, "birthdate");

                    b.HasIndex(new[] { "Email" }, "email");

                    b.HasIndex(new[] { "GroupId" }, "group_id");

                    b.HasIndex(new[] { "InvitedBy" }, "invited_by");

                    b.HasIndex(new[] { "Login" }, "login");

                    b.HasIndex(new[] { "Openid" }, "openid");

                    b.ToTable("cms_users");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserAlbum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("allow_who");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AllowWho" }, "allow_who");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id16");

                    b.ToTable("cms_user_albums");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserAutoaward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("imageurl");

                    b.Property<int>("PBlog")
                        .HasColumnType("int")
                        .HasColumnName("p_blog");

                    b.Property<int>("PComment")
                        .HasColumnType("int")
                        .HasColumnName("p_comment");

                    b.Property<int>("PContent")
                        .HasColumnType("int")
                        .HasColumnName("p_content");

                    b.Property<int>("PForum")
                        .HasColumnType("int")
                        .HasColumnName("p_forum");

                    b.Property<int>("PKarma")
                        .HasColumnType("int")
                        .HasColumnName("p_karma");

                    b.Property<int>("PPhoto")
                        .HasColumnType("int")
                        .HasColumnName("p_photo");

                    b.Property<int?>("PPrivphoto")
                        .HasColumnType("int")
                        .HasColumnName("p_privphoto");

                    b.Property<bool?>("Published")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("published")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("cms_user_autoawards");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("award_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("FromId")
                        .HasColumnType("int")
                        .HasColumnName("from_id");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("imageurl");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id17");

                    b.ToTable("cms_user_awards");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("club_id");

                    b.Property<DateTime>("Pubdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("pubdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("role")
                        .HasDefaultValueSql("'member'");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClubId" }, "club_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id18");

                    b.ToTable("cms_user_clubs");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("allow_who");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("filename");

                    b.Property<int>("Filesize")
                        .HasColumnType("int")
                        .HasColumnName("filesize");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id19");

                    b.ToTable("cms_user_files");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserFriend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("FromId")
                        .HasColumnType("int")
                        .HasColumnName("from_id");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_accepted");

                    b.Property<DateTime>("Logdate")
                        .HasColumnType("datetime")
                        .HasColumnName("logdate");

                    b.Property<int>("ToId")
                        .HasColumnType("int")
                        .HasColumnName("to_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FromId" }, "from_id");

                    b.HasIndex(new[] { "ToId" }, "to_id");

                    b.ToTable("cms_user_friends");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("alias");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("cms_user_groups");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserGroupsAccess", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("access_name");

                    b.Property<string>("AccessType")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("access_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AccessType" }, "access_type")
                        .IsUnique();

                    b.ToTable("cms_user_groups_access");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Createdate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdate");

                    b.Property<bool>("IsSended")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_sended");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_used");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code", "OwnerId", "IsUsed" }, "code");

                    b.ToTable("cms_user_invites");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserKarma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<short>("Points")
                        .HasColumnType("smallint")
                        .HasColumnName("points");

                    b.Property<DateTime>("Senddate")
                        .HasColumnType("datetime")
                        .HasColumnName("senddate");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id20");

                    b.ToTable("cms_user_karma");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserMsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("FromDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("from_del");

                    b.Property<int>("FromId")
                        .HasColumnType("int")
                        .HasColumnName("from_id");

                    b.Property<bool?>("IsNew")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_new")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("Senddate")
                        .HasColumnType("datetime")
                        .HasColumnName("senddate");

                    b.Property<bool>("ToDel")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("to_del");

                    b.Property<int>("ToId")
                        .HasColumnType("int")
                        .HasColumnName("to_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FromDel" }, "from_del");

                    b.HasIndex(new[] { "FromId" }, "from_id")
                        .HasDatabaseName("from_id1");

                    b.HasIndex(new[] { "ToDel" }, "to_del");

                    b.HasIndex(new[] { "ToId" }, "to_id")
                        .HasDatabaseName("to_id1");

                    b.ToTable("cms_user_msg");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int")
                        .HasColumnName("album_id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("allow_who")
                        .HasDefaultValueSql("'all'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Hits")
                        .HasColumnType("int")
                        .HasColumnName("hits");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("imageurl");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AlbumId" }, "album_id")
                        .HasDatabaseName("album_id1");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id21");

                    b.ToTable("cms_user_photos");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AllowWho")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("allow_who")
                        .HasDefaultValueSql("'all'");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("city");

                    b.Property<string>("CmSubscribe")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("cm_subscribe")
                        .HasDefaultValueSql("'both'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("EmailNewmsg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("email_newmsg")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Formsdata")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)")
                        .HasColumnName("formsdata");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Imageurl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("imageurl");

                    b.Property<int>("Karma")
                        .HasColumnType("int")
                        .HasColumnName("karma");

                    b.Property<bool>("Showbirth")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showbirth");

                    b.Property<bool>("Showicq")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showicq");

                    b.Property<bool>("Showmail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("showmail");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("varchar(240)")
                        .HasColumnName("signature");

                    b.Property<string>("SignatureHtml")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("signature_html");

                    b.Property<string>("Stats")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("stats");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "City" }, "city")
                        .HasDatabaseName("city1");

                    b.HasIndex(new[] { "Description" }, "description")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 333 });

                    b.HasIndex(new[] { "Formsdata" }, "formsdata")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 333 });

                    b.HasIndex(new[] { "Gender" }, "gender");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id22");

                    b.ToTable("cms_user_profiles");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUserWall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Usertype")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("usertype")
                        .HasDefaultValueSql("'users'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId" }, "author_id");

                    b.HasIndex(new[] { "UserId" }, "user_id")
                        .HasDatabaseName("user_id23");

                    b.ToTable("cms_user_wall");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUsersActivate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("Pubdate")
                        .HasColumnType("datetime")
                        .HasColumnName("pubdate");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("cms_users_activate");

                    b
                        .HasCharSet("utf8mb4")
                        .UseCollation("utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppRoleClaim", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserClaim", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserLogin", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserRole", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUserToken", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.Web.CmsUser", b =>
                {
                    b.HasOne("Rifoms.Domain.Data.Entities.App.AppUser", null)
                        .WithOne("User")
                        .HasForeignKey("Rifoms.Domain.Data.Entities.Web.CmsUser", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rifoms.Domain.Data.Entities.App.AppUser", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
